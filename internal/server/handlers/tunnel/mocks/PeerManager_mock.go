// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/server/handlers/tunnel (interfaces: PeerManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	server "github.com/atmxlab/vpn/internal/server"
	gomock "github.com/golang/mock/gomock"
)

// MockPeerManager is a mock of PeerManager interface.
type MockPeerManager struct {
	ctrl     *gomock.Controller
	recorder *MockPeerManagerMockRecorder
}

// MockPeerManagerMockRecorder is the mock recorder for MockPeerManager.
type MockPeerManagerMockRecorder struct {
	mock *MockPeerManager
}

// NewMockPeerManager creates a new mock instance.
func NewMockPeerManager(ctrl *gomock.Controller) *MockPeerManager {
	mock := &MockPeerManager{ctrl: ctrl}
	mock.recorder = &MockPeerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerManager) EXPECT() *MockPeerManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerManager) Add(arg0 context.Context, arg1 *server.Peer, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPeerManagerMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerManager)(nil).Add), arg0, arg1, arg2)
}

// GetByAddr mocks base method.
func (m *MockPeerManager) GetByAddr(arg0 context.Context, arg1 net.Addr) (*server.Peer, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddr", arg0, arg1)
	ret0, _ := ret[0].(*server.Peer)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByAddr indicates an expected call of GetByAddr.
func (mr *MockPeerManagerMockRecorder) GetByAddr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddr", reflect.TypeOf((*MockPeerManager)(nil).GetByAddr), arg0, arg1)
}

// GetByAddrAndExtend mocks base method.
func (m *MockPeerManager) GetByAddrAndExtend(arg0 context.Context, arg1 net.Addr, arg2 time.Duration) (*server.Peer, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddrAndExtend", arg0, arg1, arg2)
	ret0, _ := ret[0].(*server.Peer)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByAddrAndExtend indicates an expected call of GetByAddrAndExtend.
func (mr *MockPeerManagerMockRecorder) GetByAddrAndExtend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddrAndExtend", reflect.TypeOf((*MockPeerManager)(nil).GetByAddrAndExtend), arg0, arg1, arg2)
}

// HasPeer mocks base method.
func (m *MockPeerManager) HasPeer(arg0 context.Context, arg1 net.Addr) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPeer", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPeer indicates an expected call of HasPeer.
func (mr *MockPeerManagerMockRecorder) HasPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPeer", reflect.TypeOf((*MockPeerManager)(nil).HasPeer), arg0, arg1)
}

// Remove mocks base method.
func (m *MockPeerManager) Remove(arg0 context.Context, arg1 *server.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPeerManagerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPeerManager)(nil).Remove), arg0, arg1)
}
