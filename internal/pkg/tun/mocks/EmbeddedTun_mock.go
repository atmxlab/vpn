// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/pkg/tun (interfaces: EmbeddedTun)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmbeddedTun is a mock of EmbeddedTun interface.
type MockEmbeddedTun struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddedTunMockRecorder
}

// MockEmbeddedTunMockRecorder is the mock recorder for MockEmbeddedTun.
type MockEmbeddedTunMockRecorder struct {
	mock *MockEmbeddedTun
}

// NewMockEmbeddedTun creates a new mock instance.
func NewMockEmbeddedTun(ctrl *gomock.Controller) *MockEmbeddedTun {
	mock := &MockEmbeddedTun{ctrl: ctrl}
	mock.recorder = &MockEmbeddedTunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddedTun) EXPECT() *MockEmbeddedTunMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEmbeddedTun) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEmbeddedTunMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEmbeddedTun)(nil).Close))
}

// Name mocks base method.
func (m *MockEmbeddedTun) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEmbeddedTunMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEmbeddedTun)(nil).Name))
}

// Read mocks base method.
func (m *MockEmbeddedTun) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockEmbeddedTunMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEmbeddedTun)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockEmbeddedTun) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockEmbeddedTunMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEmbeddedTun)(nil).Write), arg0)
}
