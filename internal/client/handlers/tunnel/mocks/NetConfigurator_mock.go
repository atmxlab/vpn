// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/client/handlers/tunnel (interfaces: NetConfigurator)
//
// Generated by this command:
//
//	mockgen -destination=/Users/timur_abdurashidov/Desktop/other/vpn/internal/client/handlers/tunnel/mocks/NetConfigurator_mock.go -package=mocks . NetConfigurator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetConfigurator is a mock of NetConfigurator interface.
type MockNetConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockNetConfiguratorMockRecorder
}

// MockNetConfiguratorMockRecorder is the mock recorder for MockNetConfigurator.
type MockNetConfiguratorMockRecorder struct {
	mock *MockNetConfigurator
}

// NewMockNetConfigurator creates a new mock instance.
func NewMockNetConfigurator(ctrl *gomock.Controller) *MockNetConfigurator {
	mock := &MockNetConfigurator{ctrl: ctrl}
	mock.recorder = &MockNetConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetConfigurator) EXPECT() *MockNetConfiguratorMockRecorder {
	return m.recorder
}

// ConfigureRouting mocks base method.
func (m *MockNetConfigurator) ConfigureRouting(arg0 context.Context, arg1 net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureRouting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureRouting indicates an expected call of ConfigureRouting.
func (mr *MockNetConfiguratorMockRecorder) ConfigureRouting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureRouting", reflect.TypeOf((*MockNetConfigurator)(nil).ConfigureRouting), arg0, arg1)
}
