// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/client/handlers/tunnel (interfaces: Stopper)
//
// Generated by this command:
//
//	mockgen -destination=/Users/timur_abdurashidov/Desktop/other/vpn/internal/client/handlers/tunnel/mocks/Stopper_mock.go -package=mocks . Stopper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStopper is a mock of Stopper interface.
type MockStopper struct {
	ctrl     *gomock.Controller
	recorder *MockStopperMockRecorder
}

// MockStopperMockRecorder is the mock recorder for MockStopper.
type MockStopperMockRecorder struct {
	mock *MockStopper
}

// NewMockStopper creates a new mock instance.
func NewMockStopper(ctrl *gomock.Controller) *MockStopper {
	mock := &MockStopper{ctrl: ctrl}
	mock.recorder = &MockStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStopper) EXPECT() *MockStopperMockRecorder {
	return m.recorder
}

// Stop mocks base method.
func (m *MockStopper) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStopperMockRecorder) Stop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStopper)(nil).Stop), arg0)
}
