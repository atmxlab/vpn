// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/server/handlers/tunnel (interfaces: IpDistributor)
//
// Generated by this command:
//
//	mockgen -destination=/Users/timur_abdurashidov/Desktop/other/vpn/internal/server/handlers/tunnel/mocks/IpDistributor_mock.go -package=mocks . IpDistributor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIpDistributor is a mock of IpDistributor interface.
type MockIpDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockIpDistributorMockRecorder
}

// MockIpDistributorMockRecorder is the mock recorder for MockIpDistributor.
type MockIpDistributorMockRecorder struct {
	mock *MockIpDistributor
}

// NewMockIpDistributor creates a new mock instance.
func NewMockIpDistributor(ctrl *gomock.Controller) *MockIpDistributor {
	mock := &MockIpDistributor{ctrl: ctrl}
	mock.recorder = &MockIpDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpDistributor) EXPECT() *MockIpDistributorMockRecorder {
	return m.recorder
}

// AcquireIP mocks base method.
func (m *MockIpDistributor) AcquireIP() (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireIP")
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireIP indicates an expected call of AcquireIP.
func (mr *MockIpDistributorMockRecorder) AcquireIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireIP", reflect.TypeOf((*MockIpDistributor)(nil).AcquireIP))
}

// ReleaseIP mocks base method.
func (m *MockIpDistributor) ReleaseIP(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIP indicates an expected call of ReleaseIP.
func (mr *MockIpDistributorMockRecorder) ReleaseIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockIpDistributor)(nil).ReleaseIP), arg0)
}
