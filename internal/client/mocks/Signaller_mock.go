// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/client (interfaces: Signaller)
//
// Generated by this command:
//
//	mockgen -destination=/Users/timur_abdurashidov/Desktop/other/vpn/internal/client/mocks/Signaller_mock.go -package=mocks . Signaller
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockSignaller is a mock of Signaller interface.
type MockSignaller struct {
	ctrl     *gomock.Controller
	recorder *MockSignallerMockRecorder
}

// MockSignallerMockRecorder is the mock recorder for MockSignaller.
type MockSignallerMockRecorder struct {
	mock *MockSignaller
}

// NewMockSignaller creates a new mock instance.
func NewMockSignaller(ctrl *gomock.Controller) *MockSignaller {
	mock := &MockSignaller{ctrl: ctrl}
	mock.recorder = &MockSignallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignaller) EXPECT() *MockSignallerMockRecorder {
	return m.recorder
}

// WaitWithTimeout mocks base method.
func (m *MockSignaller) WaitWithTimeout(arg0 context.Context, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitWithTimeout indicates an expected call of WaitWithTimeout.
func (mr *MockSignallerMockRecorder) WaitWithTimeout(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitWithTimeout", reflect.TypeOf((*MockSignaller)(nil).WaitWithTimeout), arg0, arg1)
}
