// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atmxlab/vpn/internal/client (interfaces: KPAAction)
//
// Generated by this command:
//
//	mockgen -destination=/Users/timur_abdurashidov/Desktop/other/vpn/internal/client/mocks/KPAAction_mock.go -package=mocks . KPAAction
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKPAAction is a mock of KPAAction interface.
type MockKPAAction struct {
	ctrl     *gomock.Controller
	recorder *MockKPAActionMockRecorder
}

// MockKPAActionMockRecorder is the mock recorder for MockKPAAction.
type MockKPAActionMockRecorder struct {
	mock *MockKPAAction
}

// NewMockKPAAction creates a new mock instance.
func NewMockKPAAction(ctrl *gomock.Controller) *MockKPAAction {
	mock := &MockKPAAction{ctrl: ctrl}
	mock.recorder = &MockKPAActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKPAAction) EXPECT() *MockKPAActionMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockKPAAction) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockKPAActionMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockKPAAction)(nil).Run), arg0)
}
